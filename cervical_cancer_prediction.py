# -*- coding: utf-8 -*-
"""Cervical cancer prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HKV_-_VPT9stF3QWGuLMbePq3ft-8tsa
"""

#Loading the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, BaggingClassifier,AdaBoostClassifier,GradientBoostingClassifier
from sklearn.linear_model import LinearRegression,LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import RFE
from collections import Counter
from imblearn.over_sampling import SMOTE
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
import warnings
warnings.filterwarnings('ignore')

#Reading and Understanding the data
df=pd.read_csv('/content/drive/MyDrive/cervical.csv')

df.head()

df.columns

df.info()

df.shape

df = df.replace('?', np.NaN)

df.isnull().sum()

x_features_categorical=[
 'Smokes','Hormonal_Contraceptives','IUD','STDs','STDs_condylomatosis','STDs_cervical_condylomatosis','STDs_vaginal_condylomatosis','STDs_vulvo_perineal_condylomatosis','STDs_syphilis','STDs_pelvic_inflammatory_disease','STDs_genital_herpes','STDs_molluscum_contagiosum','STDs_AIDS','STDs_HIV','STDs_Hepatitis_B','STDs_HPV','Dx_Cancer','Dx_CIN','Dx_HPV','Dx']
x_features_categorical

x_features_categorical=[i for i in x_features if i not in x_features_categorical]
x_features_categorical

impute = df.copy()
impute=df.astype('float')

plt.figure(figsize = (12,8))
plt.pie(impute['Biopsy'].value_counts(), labels = ['NO', 'YES'], autopct = '%1.1f%%', labeldistance=1.1, textprops = {'fontsize': 20})
plt.title('Biopsy Percentage', fontsize=20)
plt.show()

#Imbalance data!
print("Count Plots of Categorical Columns");print()
for i in impute[x_features_categorical]:
        print('*'*100)
        sns.countplot(impute[i])
        plt.title(i)
        plt.show()

print("Density Plots");print()
for i in impute[x_features_categorical]:
        print('*'*100)
        sns.distplot(impute[i])
        plt.title(i)
        plt.show()

#Building the model
#defining my Xs and Ys
x=df.drop('Dx_Cancer',axis=1) #dropping the target
y=df['Dx_Cancer']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=32)

tree=RandomForestClassifier()

#defining tree params for grid based search
tree_params={
    "criterion":["gini", "entropy"],
    "splitter":["best", "random"],
    "max_depth":[3,4,5,6],
    "max_features":["auto","sqrt","log2"],
    "random_state": [123]
}

Rf_model=RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)
model_tree=tree.fit(x_train,y_train)
pred_tree=tree.predict(x_test)
f1_score(y_test,pred_tree)

